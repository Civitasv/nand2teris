class Tetromino {
  field Array tetromino; // 7*16, every row of tetromino is a type, and every col is its four angle

  constructor Tetromino new() {
    var int i;
    var int j;
    var Array temp;

    let i = 0;
    let j = 0;

    let tetromino = Array.new(7);

    while (i < 7) {
      let tetromino[i] = Array.new(16);
      let i = i + 1;
    }

    // I
    let temp = tetromino[0];

    let temp[0] = Coordinate.new(0, 0);
    let temp[1] = Coordinate.new(1, 0);
    let temp[2] = Coordinate.new(2, 0);
    let temp[3] = Coordinate.new(3, 0);

    let temp[4] = Coordinate.new(0, 0);
    let temp[5] = Coordinate.new(0, 1);
    let temp[6] = Coordinate.new(0, 2);
    let temp[7] = Coordinate.new(0, 3);

    let temp[8] = Coordinate.new(0, 0);
    let temp[9] = Coordinate.new(1, 0);
    let temp[10] = Coordinate.new(2, 0);
    let temp[11] = Coordinate.new(3, 0);

    let temp[12] = Coordinate.new(0, 0);
    let temp[13] = Coordinate.new(0, 1);
    let temp[14] = Coordinate.new(0, 2);
    let temp[15] = Coordinate.new(0, 3);

    // O
    let temp = tetromino[1];

    let temp[0] = Coordinate.new(0, 0);
    let temp[1] = Coordinate.new(1, 0);
    let temp[2] = Coordinate.new(0, 1);
    let temp[3] = Coordinate.new(1, 1);

    let temp[4] = Coordinate.new(0, 0);
    let temp[5] = Coordinate.new(1, 0);
    let temp[6] = Coordinate.new(0, 1);
    let temp[7] = Coordinate.new(1, 1);

    let temp[8] = Coordinate.new(0, 0);
    let temp[9] = Coordinate.new(1, 0);
    let temp[10] = Coordinate.new(0, 1);
    let temp[11] = Coordinate.new(1, 1);

    let temp[12] = Coordinate.new(0, 0);
    let temp[13] = Coordinate.new(1, 0);
    let temp[14] = Coordinate.new(0, 1);
    let temp[15] = Coordinate.new(1, 1);

    // T
    let temp = tetromino[2];

    let temp[0] = Coordinate.new(1, 0);
    let temp[1] = Coordinate.new(1, 1);
    let temp[2] = Coordinate.new(0, 1);
    let temp[3] = Coordinate.new(2, 1);

    let temp[4] = Coordinate.new(0, 0);
    let temp[5] = Coordinate.new(0, 1);
    let temp[6] = Coordinate.new(0, 2);
    let temp[7] = Coordinate.new(1, 1);

    let temp[8] = Coordinate.new(0, 0);
    let temp[9] = Coordinate.new(1, 0);
    let temp[10] = Coordinate.new(2, 0);
    let temp[11] = Coordinate.new(1, 1);

    let temp[12] = Coordinate.new(1, 0);
    let temp[13] = Coordinate.new(1, 1);
    let temp[14] = Coordinate.new(1, 2);
    let temp[15] = Coordinate.new(0, 1);

    // L
    let temp = tetromino[3];

    let temp[0] = Coordinate.new(0, 1);
    let temp[1] = Coordinate.new(1, 1);
    let temp[2] = Coordinate.new(2, 1);
    let temp[3] = Coordinate.new(2, 0);

    let temp[4] = Coordinate.new(0, 0);
    let temp[5] = Coordinate.new(0, 1);
    let temp[6] = Coordinate.new(0, 2);
    let temp[7] = Coordinate.new(1, 2);

    let temp[8] = Coordinate.new(0, 0);
    let temp[9] = Coordinate.new(1, 0);
    let temp[10] = Coordinate.new(2, 0);
    let temp[11] = Coordinate.new(0, 1);

    let temp[12] = Coordinate.new(0, 0);
    let temp[13] = Coordinate.new(1, 0);
    let temp[14] = Coordinate.new(1, 1);
    let temp[15] = Coordinate.new(1, 2);

    // J
    let temp = tetromino[4];

    let temp[0] = Coordinate.new(0, 0);
    let temp[1] = Coordinate.new(0, 1);
    let temp[2] = Coordinate.new(1, 1);
    let temp[3] = Coordinate.new(2, 1);

    let temp[4] = Coordinate.new(0, 0);
    let temp[5] = Coordinate.new(0, 1);
    let temp[6] = Coordinate.new(0, 2);
    let temp[7] = Coordinate.new(1, 0);

    let temp[8] = Coordinate.new(0, 0);
    let temp[9] = Coordinate.new(1, 0);
    let temp[10] = Coordinate.new(2, 0);
    let temp[11] = Coordinate.new(2, 1);

    let temp[12] = Coordinate.new(0, 2);
    let temp[13] = Coordinate.new(1, 0);
    let temp[14] = Coordinate.new(1, 1);
    let temp[15] = Coordinate.new(1, 2);

    // S
    let temp = tetromino[5];

    let temp[0] = Coordinate.new(0, 1);
    let temp[1] = Coordinate.new(1, 0);
    let temp[2] = Coordinate.new(2, 0);
    let temp[3] = Coordinate.new(1, 1);

    let temp[4] = Coordinate.new(0, 0);
    let temp[5] = Coordinate.new(0, 1);
    let temp[6] = Coordinate.new(1, 1);
    let temp[7] = Coordinate.new(1, 2);

    let temp[8] = Coordinate.new(0, 1);
    let temp[9] = Coordinate.new(1, 0);
    let temp[10] = Coordinate.new(2, 0);
    let temp[11] = Coordinate.new(1, 1);
    
    let temp[12] = Coordinate.new(0, 0);
    let temp[13] = Coordinate.new(0, 1);
    let temp[14] = Coordinate.new(1, 1);
    let temp[15] = Coordinate.new(1, 2);
    
    // Z
    let temp = tetromino[6];

    let temp[0] = Coordinate.new(0, 0);
    let temp[1] = Coordinate.new(1, 0);
    let temp[2] = Coordinate.new(1, 1);
    let temp[3] = Coordinate.new(2, 1);

    let temp[4] = Coordinate.new(0, 1);
    let temp[5] = Coordinate.new(0, 2);
    let temp[6] = Coordinate.new(1, 0);
    let temp[7] = Coordinate.new(1, 1);

    let temp[8] = Coordinate.new(0, 0);
    let temp[9] = Coordinate.new(1, 0);
    let temp[10] = Coordinate.new(1, 1);
    let temp[11] = Coordinate.new(2, 1);

    let temp[12] = Coordinate.new(0, 1);
    let temp[13] = Coordinate.new(0, 2);
    let temp[14] = Coordinate.new(1, 0);
    let temp[15] = Coordinate.new(1, 1);

    return this;
  }

  method void dispose() {
    var int i;
    var int j;
    var int k;
    var Array temp;
    var Coordinate coord;

    let i = 0;
    let j = 0;
    let k = 0;

    do tetromino.dispose();
    do Memory.deAlloc(this);

    return;
  }

  function int width(int type, int size, int margin, int angle) {
    if(type = 0){
      if (angle = 0){
        return 4;
      }
      if (angle = 90) {
        return 1;
      }
      if (angle = 180) {
        return 4;
      }
      if(angle = 270) {
        return 1;
      }
    } 

    if (type = 1){
      return 2;
    } 

    if (angle = 0){
      return 3;
    }
    if (angle = 90) {
      return 2;
    }
    if (angle = 180) {
      return 3;
    }
    if(angle = 270) {
      return 2;
    }     

    return -1;
  }

  function int height(int type, int size, int margin, int angle) {
    if(type = 0){
      if (angle = 0){
        return 1;
      }
      if (angle = 90) {
        return 4;
      }
      if (angle = 180) {
        return 1;
      }
      if(angle = 270) {
        return 4;
      }
    } 

    if(type = 1){
      return 2;
    } 

    if (angle = 0){
      return 2;
    }
    if (angle = 90) {
      return 3;
    }
    if (angle = 180) {
      return 2;
    }
    if(angle = 270) {
      return 3;
    }     

    return -1;
  }

  method Array getTetromino() {
    return tetromino;
  }
}